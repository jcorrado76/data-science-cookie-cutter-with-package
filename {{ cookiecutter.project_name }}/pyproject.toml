[tool.poetry]
name = "{{ cookiecutter.package_name }}"
# the first alpha pre-release of version 0.1.0
version = "{{ cookiecutter.version }} "
description = "{{ cookiecutter.description }}"
authors = ["{{ cookiecutter.full_name }} <{{ cookiecutter.email }}>"]
readme = "README.md"
packages = [
    {include = "{{ cookiecutter.package_name }}"}
]

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"


[tool.poetry.group.dev.dependencies]
prettier = "*"
sqlfluff = "*"
shandy-sqlfmt = {extras = ["jinjafmt"], version = "*"}
mypy = "*"
black = "*"
flake8 = "*"
pre-commit = "*"
pytest = "*"
pytest-cov = "*"
interrogate = "*"
isort = "*"
commitizen = "*"
ipykernel = "*"
jupyter = "*"
pandas-stubs = "*"
flake8-bugbear = "*"
sourcery = "*"

## ISORT CONFIGURATION
[tool.isort]
profile = "black"
import_heading_stdlib = "Python Standard Library Imports"
import_heading_thirdparty = "Third Party Imports"
import_heading_firstparty = "{{ cookiecutter.package_name }} Imports"
# src_paths = ["<path-to-src-code>"]
known_first_party = ["{{ cookiecutter.package_name }}"]
# known_third_party = ["<any 3rd party packages with potential name collisions>"]

## SQLFLUFF CONFIGURATION
### Make SQLFluff play nicely with sqlfmt, as described
### here - https://docs.sqlfmt.com/integrations/sqlfluff
[tool.sqlfluff]
exclude_rules = [
    "layout.indent", 
    "layout.cte_bracket", 
    "layout.select_targets"
]
# set max_line_length to whatever you set in sqlfmt
max_line_length = 88

[tool.sqlfluff.rules]
capitalisation_policy = "lower"
extended_capitalisation_policy = "lower"

[tool.sqlfluff.rules.convention.terminator]
multiline_newline = "True"

## SQLFMT CONFIGURATION
[tool.sqlfmt]
### Ignore common DBT directories
exclude=["target/**/*", "dbt_packages/**/*"]

## PYTEST CONFIGURATION
[tool.pytest.ini_options]
    filterwarnings = [
        # transform all other warnings into errors
        "error",
        # ignore UserWarnings
        "ignore::UserWarning",
        # note the use of single quote below to denote "raw" strings in TOML
        'ignore:function ham\(\) is deprecated:DeprecationWarning',
        "ignore::DeprecationWarning",
    ]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
